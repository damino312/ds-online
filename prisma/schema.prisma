datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    user_id  String @id @default(uuid())
    user_login  String @unique
    user_email  String @unique
    user_name  String
    user_picture  String?
    user_password  String

    servers  Server[]
    members Member[]
    channels  Channel[]

    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
}

model Server {
    server_id  String @id @default(uuid())
    server_name  String
    server_picture  String? @db.Text
    server_invite_code String @db.Text @unique
    server_description  String?

    server_owner  String
    profile User @relation(fields: [server_owner], references: [user_id], onDelete: Cascade)

    members Member[]
    channels  Channel[]

    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    @@index([server_owner])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

model Member {
    member_id String @id @default(uuid())
    member_role MemberRole @default(GUEST)

    user_id  String
    profile User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

    server_id  String
    server Server @relation(fields: [server_id], references: [server_id], onDelete: Cascade)

    conversations_initiated Conversation[] @relation("member_one")
    conversations_received Conversation[] @relation("member_two")

    messages Message[]

    directMessages DirectMessage[]

    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    @@index([user_id])
    @@index([server_id])
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}

model Channel {
    channel_id  String @id @default(uuid())
    channel_name  String
    channel_type  ChannelType

    user_id  String
    profile User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

    server_id  String
    server Server @relation(fields: [server_id], references: [server_id], onDelete: Cascade)

    messages Message[]

    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    @@index([user_id])
    @@index([server_id])
}

model Message {
    message_id  String @id @default(uuid())
    message_content  String @db.Text

    file_url String? @db.Text

    member_id  String
    member Member @relation(fields: [member_id], references: [member_id], onDelete: Cascade)

    channel_id  String
    channel Channel @relation(fields: [channel_id], references: [channel_id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([member_id])
    @@index([channel_id])
}

model Conversation {
    conversation_id  String @id @default(uuid())

    member_one_id String
    member_one Member @relation("member_one", fields: [member_one_id], references: [member_id], onDelete: Cascade)

    member_two_id String
    member_two Member @relation("member_two", fields: [member_two_id], references: [member_id], onDelete: Cascade)

    messages DirectMessage[]

    @@index ([member_one_id])
    @@index ([member_two_id])

    @@unique([member_one_id, member_two_id])
}

model DirectMessage {
    dm_id  String @id @default(uuid())
    dm_content  String @db.Text

    file_url String? @db.Text

    member_id String
    member Member @relation(fields: [member_id], references: [member_id], onDelete: Cascade)

    conversation_id  String
    conversation Conversation @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([member_id])
    @@index([conversation_id])
}